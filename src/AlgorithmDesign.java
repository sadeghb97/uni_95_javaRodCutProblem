import java.util.*;

public class AlgorithmDesign {
    public static void main(String[] args) {
        Scanner input=new Scanner(System.in);
        int number;
        int p[];
        
        System.out.print("\033\143");
        System.out.print("Do you want Price Table Generated By Random (Enter true To Yes): ");
        if(Boolean.valueOf(input.next())){
            System.out.print("\nEnter Price Table Length (Values Generated By Random): ");
            number=input.nextInt();
            number++;
            p=new int[number];
            Random rnd=new Random();
            p[0]=0;
            for(int i=1; number>i; i++) p[i]=p[i-1]+rnd.nextInt(5);
        }
        else{
            number=16;
            p=new int[16];
            p[0]=0; p[1]=3; p[2]=4; p[3]=6; p[4]=9; p[5]=11;
            p[6]=15; p[7]=18; p[8]=21; p[9]=24; p[10]=28; p[11]=31;
            p[12]=33; p[13]=37; p[14]=38; p[15]=43;
        }

        System.out.println();
        for(int i=0; number>i; i++) System.out.printf("%d: %d\n", i,p[i]);

        System.out.print("\nEnter Rod Length: ");
        int rodLength=input.nextInt();
        System.out.print("\nnot Dynamic rodCut Func Measure Optimum Price (Enter true To Yes): ");
        boolean noDyn=Boolean.valueOf(input.next());
        
        System.out.print("\nTop Down rodCut Func Measure Optimum Price (Enter true To Yes): ");
        boolean topDown=Boolean.valueOf(input.next());
        System.out.println("----------------------------------------");
        
        
        System.out.println();
        System.out.printf("Price Table Length: %d\n",number-1);
        System.out.printf("Rod Length: %d\n\n",rodLength);
        long startTime=System.currentTimeMillis();
        
        System.out.printf("Optimum Price (Bottpm Up): %d\n", bottomUpRodCut(p, rodLength));
        System.out.printf("Time: %dms\n\n", System.currentTimeMillis()-startTime);
        startTime=System.currentTimeMillis();
        
        if(topDown){
            System.out.printf("Optimum Price (Top Down): %d\n", topDownRecRodCut(p, rodLength));
            System.out.printf("Time: %dms\n\n", System.currentTimeMillis()-startTime);
            startTime=System.currentTimeMillis();
        }
        
        if(noDyn){
            System.out.printf("Optimum Price (recRodCut): %d\n", recRodCut(p, rodLength));
            System.out.printf("Time: %dms\n\n", System.currentTimeMillis()-startTime);
            startTime=System.currentTimeMillis();
        }
    }
    
    public static int recRodCut(int pr[],int n){
        if(n<=1) return pr[n];
        
        int max=-1;
        for(int k=1; n>k && pr.length>k; k++){
            int value=pr[k]+recRodCut(pr, n-k);
            if(value>max) max=value;
        }
        return max;
    }
    
    public static int pvTopDownRecRodCut(int pr[],int n,int op[]){
        if(n<=1) return pr[n];
        if(op[n]>0) return op[n];
        
        int max=-1;
        for(int k=1; n>k && pr.length>k; k++){
            int value=pr[k]+pvTopDownRecRodCut(pr, n-k,op);
            if(value>max) max=value;
        }
        op[n]=max;
        return max;
    }
    
    public static int topDownRecRodCut(int pr[],int n){
        int o[]=new int[n+1];
        for(int i=0; n>i; i++) o[i]=0;
        return pvTopDownRecRodCut(pr, n, o);
    }
    
    public static int bottomUpRodCut(int pr[], int n){
        int op[]=new int [n+1];
        for(int i=0; 2>i; i++) op[i]=pr[i];
        for(int i=2; n+1>i; i++) op[i]=0;
        
        for(int q=2; n>=q; q++){
            int max=-1;
            for(int k=1; q>k && pr.length>k; k++){
                int value=pr[k]+op[q-k];
                if(value>max) max=value;
            }
            op[q]=max;
        }
        return op[n];
    }
}
